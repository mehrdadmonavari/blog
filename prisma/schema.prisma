// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "mysql"
   url      = env("DATABASE_URL")
}

model Account {
   id                String  @id @default(cuid())
   userId            String
   type              String
   provider          String
   providerAccountId String
   refresh_token     String? @db.Text
   access_token      String? @db.Text
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String? @db.Text
   session_state     String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@map("accounts")
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique
   userId       String
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
   id            String         @id @default(cuid())
   name          String?
   email         String?        @unique
   emailVerified DateTime?
   image         String?
   accounts      Account[]
   sessions      Session[]
   PostCategory  PostCategory[]

   @@map("users")
}

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
}

model PostCategory {
   id          Int      @id @default(autoincrement())
   name        String   @db.VarChar(255)
   description String   @db.Text
   status      Status   @default(ENABEL)
   createdAt   DateTime @default(now()) @map("created_at")
   updatedAt   DateTime @updatedAt @map("updated_at")

   userId String
   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("post_categories")
}

enum Status {
   ENABEL
   DISABLE
}
